{
  "Conditions": {
    "MyCondition": {
      "Fn::Equals": [
        true,
        false
      ]
    }
  },
  "Resources": {
    "MinimalFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "hello.zip"
        },
        "Handler": "hello.handler",
        "Role": {
          "Fn::GetAtt": [
            "MinimalFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      }
    },
    "MinimalFunctionVersion640128d35d": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MinimalFunction"
        }
      }
    },
    "MinimalFunctionAliaslive": {
      "Type": "AWS::Lambda::Alias",
      "UpdatePolicy": {
        "CodeDeployLambdaAliasUpdate": {
          "ApplicationName": {
            "Ref": "ServerlessDeploymentApplication"
          },
          "DeploymentGroupName": {
            "Ref": "MinimalFunctionDeploymentGroup"
          }
        }
      },
      "Properties": {
        "Name": "live",
        "FunctionName": {
          "Ref": "MinimalFunction"
        },
        "FunctionVersion": {
          "Fn::GetAtt": [
            "MinimalFunctionVersion640128d35d",
            "Version"
          ]
        }
      }
    },
    "MinimalFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      }
    },
    "ServerlessDeploymentApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ComputePlatform": "Lambda"
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"
        ]
      }
    },
    "MinimalFunctionDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "AlarmConfiguration": {
          "Fn::If": [
            "MyCondition",
            {
              "Enabled": true,
              "Alarms": [
                {
                  "Name": "Alarm1"
                },
                {
                  "Name": "Alarm2"
                },
                {
                  "Name": "Alarm3"
                }
              ]
            },
            {
              "Enabled": true,
              "Alarms": [
                {
                  "Name": "Alarm1"
                },
                {
                  "Name": "Alarm5"
                }
              ]
            }
          ]
        },
        "ApplicationName": {
          "Ref": "ServerlessDeploymentApplication"
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE",
            "DEPLOYMENT_STOP_ON_ALARM",
            "DEPLOYMENT_STOP_ON_REQUEST"
          ]
        },
        "DeploymentConfigName": {
          "Fn::Sub": [
            "CodeDeployDefault.Lambda${ConfigName}",
            {
              "ConfigName": "Linear10PercentEvery3Minutes"
            }
          ]
        },
        "DeploymentStyle": {
          "DeploymentType": "BLUE_GREEN",
          "DeploymentOption": "WITH_TRAFFIC_CONTROL"
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    }
  }
}