{
  "Resources": {
    "ConnectorNotTestedPolicy": {
      "Metadata": {
        "aws:sam:connectors": {
          "ConnectorNotTested": {
            "Destination": {
              "Type": "AWS::DynamoDB::Table"
            },
            "Source": {
              "Type": "AWS::Serverless::Function"
            }
          }
        }
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PartiQLDelete",
                "dynamodb:PartiQLInsert",
                "dynamodb:PartiQLUpdate"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": ["Table", "Arn"]
                },
                {
                  "Fn::Sub": [
                    "${DestinationArn}/index/*",
                    {
                      "DestinationArn": {
                        "Fn::GetAtt": ["Table", "Arn"]
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Roles": [
          {
            "Ref": "TriggerFunctionRole"
          }
        ]
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "ConnectorPolicy": {
      "Metadata": {
        "aws:sam:connectors": {
          "Connector": {
            "Destination": {
              "Type": "AWS::Serverless::Function"
            },
            "Source": {
              "Type": "AWS::DynamoDB::Table"
            }
          }
        }
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:ListStreams"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": [
                    "${SourceArn}/stream/*",
                    {
                      "SourceArn": {
                        "Fn::GetAtt": ["Table", "Arn"]
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Roles": [
          {
            "Ref": "InvokedFunctionRole"
          }
        ]
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "DynamoDBTableStream": {
      "DependsOn": ["ConnectorPolicy"],
      "Properties": {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": ["Table", "StreamArn"]
        },
        "FunctionName": {
          "Fn::GetAtt": ["InvokedFunction", "Arn"]
        },
        "StartingPosition": "TRIM_HORIZON"
      },
      "Type": "AWS::Lambda::EventSourceMapping"
    },
    "InvokedFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk');\nexports.handler = async (event) => {\n  const sqs = new AWS.SQS();\n  await sqs.sendMessage({\n    QueueUrl: process.env.VERIFICATION_QUEUE_URL,\n    MessageBody: \"test\"\n  }).promise();\n};\n"
        },
        "Environment": {
          "Variables": {
            "VERIFICATION_QUEUE_URL": {
              "Ref": "VerificationQueue"
            }
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["InvokedFunctionRole", "Arn"]
        },
        "Runtime": "nodejs14.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "InvokedFunctionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": ["sqs:SendMessage*"],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${queueName}",
                      {
                        "queueName": {
                          "Fn::GetAtt": ["VerificationQueue", "QueueName"]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "InvokedFunctionRolePolicy0"
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "Table": {
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "Id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "Id",
            "KeyType": "HASH"
          }
        ],
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "Type": "AWS::DynamoDB::Table"
    },
    "TriggerFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk');\nexports.handler = async (event) => {\n  console.log(JSON.stringify(event));\n  const docClient = new AWS.DynamoDB.DocumentClient();\n  const response = await docClient.put({ \n    TableName: process.env.TABLE_NAME, \n    Item: {\n      Id: 'TestInput1234'\n    }\n  }).promise();\n\n  const data = await new AWS.SQS().receiveMessage({\n    QueueUrl: process.env.VERIFICATION_QUEUE_URL,\n    WaitTimeSeconds: 5,\n  }).promise();\n  if (data.Messages.length == 0) {\n    throw 'No messages in the queue!';\n  }\n};\n"
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "Table"
            },
            "VERIFICATION_QUEUE_URL": {
              "Ref": "VerificationQueue"
            }
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["TriggerFunctionRole", "Arn"]
        },
        "Runtime": "nodejs14.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ],
        "Timeout": 10
      },
      "Type": "AWS::Lambda::Function"
    },
    "TriggerFunctionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "sqs:ChangeMessageVisibility",
                    "sqs:ChangeMessageVisibilityBatch",
                    "sqs:DeleteMessage",
                    "sqs:DeleteMessageBatch",
                    "sqs:GetQueueAttributes",
                    "sqs:ReceiveMessage"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${queueName}",
                      {
                        "queueName": {
                          "Fn::GetAtt": ["VerificationQueue", "QueueName"]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "TriggerFunctionRolePolicy0"
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "VerificationQueue": {
      "Type": "AWS::SQS::Queue"
    }
  }
}
