{
  "Conditions": {
    "C1": {
      "Fn::Equals": [
        true,
        true
      ]
    }
  },
  "Parameters": {
    "EndpointConf": {
      "Default": "REGIONAL",
      "Type": "String"
    },
    "MyDomainCert": {
      "Default": "another-api-arn",
      "Type": "String"
    },
    "MyMTLSUriHTTP": {
      "Default": "another-api-v2-truststore-uri",
      "Type": "String"
    },
    "MyMTLSVersionHTTP": {
      "Default": "another-api-v2-truststore-version",
      "Type": "String"
    }
  },
  "Resources": {
    "ApiGatewayDomainNameV2c0cd2d9dfc": {
      "Condition": "C1",
      "Properties": {
        "DomainName": {
          "Fn::Sub": "example-cn-north-1.com"
        },
        "DomainNameConfigurations": [
          {
            "CertificateArn": "another-api-arn",
            "EndpointType": "REGIONAL",
            "SecurityPolicy": "TLS_1_2"
          }
        ],
        "MutualTlsAuthentication": {
          "TruststoreUri": "another-api-v2-truststore-uri",
          "TruststoreVersion": "another-api-v2-truststore-version"
        },
        "Tags": {
          "httpapi:createdBy": "SAM"
        }
      },
      "Type": "AWS::ApiGatewayV2::DomainName"
    },
    "MyApi": {
      "Condition": "C1",
      "Properties": {
        "Body": {
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            },
            "version": "1.0"
          },
          "openapi": "3.0.1",
          "paths": {
            "/get": {
              "Fn::If": [
                "C1",
                {
                  "put": {
                    "Fn::If": [
                      "C1",
                      {
                        "responses": {},
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "payloadFormatVersion": "2.0",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "C1",
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "servers": [
            {
              "x-amazon-apigateway-endpoint-configuration": {
                "disableExecuteApiEndpoint": false
              }
            }
          ],
          "tags": [
            {
              "name": "httpapi:createdBy",
              "x-amazon-apigateway-tag-value": "SAM"
            }
          ]
        }
      },
      "Type": "AWS::ApiGatewayV2::Api"
    },
    "MyApiProdStage": {
      "Condition": "C1",
      "Properties": {
        "ApiId": {
          "Ref": "MyApi"
        },
        "AutoDeploy": true,
        "StageName": "Prod",
        "Tags": {
          "httpapi:createdBy": "SAM"
        }
      },
      "Type": "AWS::ApiGatewayV2::Stage"
    },
    "MyApifetchApiMapping": {
      "Condition": "C1",
      "Properties": {
        "ApiId": {
          "Ref": "MyApi"
        },
        "ApiMappingKey": "fetch",
        "DomainName": {
          "Ref": "ApiGatewayDomainNameV2c0cd2d9dfc"
        },
        "Stage": {
          "Ref": "MyApiProdStage"
        }
      },
      "Type": "AWS::ApiGatewayV2::ApiMapping"
    },
    "MyApigetApiMapping": {
      "Condition": "C1",
      "Properties": {
        "ApiId": {
          "Ref": "MyApi"
        },
        "ApiMappingKey": "get",
        "DomainName": {
          "Ref": "ApiGatewayDomainNameV2c0cd2d9dfc"
        },
        "Stage": {
          "Ref": "MyApiProdStage"
        }
      },
      "Type": "AWS::ApiGatewayV2::ApiMapping"
    },
    "MyFunction": {
      "Condition": "C1",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event) => {\n  const response = {\n    statusCode: 200,\n    body: JSON.stringify('Hello from Lambda!'),\n  };\n  return response;\n};\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyFunctionApiPermission": {
      "Condition": "C1",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PUT/get",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunctionImplicitGetPermission": {
      "Condition": "C1",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/implicit",
            {
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunctionRole": {
      "Condition": "C1",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws-cn:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ServerlessHttpApi": {
      "Condition": "C1",
      "Properties": {
        "Body": {
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            },
            "version": "1.0"
          },
          "openapi": "3.0.1",
          "paths": {
            "/implicit": {
              "Fn::If": [
                "C1",
                {
                  "post": {
                    "Fn::If": [
                      "C1",
                      {
                        "responses": {},
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "payloadFormatVersion": "2.0",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "C1",
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "tags": [
            {
              "name": "httpapi:createdBy",
              "x-amazon-apigateway-tag-value": "SAM"
            }
          ]
        }
      },
      "Type": "AWS::ApiGatewayV2::Api"
    },
    "ServerlessHttpApiApiGatewayDefaultStage": {
      "Condition": "C1",
      "Properties": {
        "ApiId": {
          "Ref": "ServerlessHttpApi"
        },
        "AutoDeploy": true,
        "StageName": "$default",
        "Tags": {
          "httpapi:createdBy": "SAM"
        }
      },
      "Type": "AWS::ApiGatewayV2::Stage"
    }
  }
}
