{
  "Conditions": {
    "NOTQueueCreationDisabled2da03e5b6f": {
      "Fn::Not": [
        {
          "Condition": "QueueCreationDisabled"
        }
      ]
    },
    "QueueCreationDisabled": {
      "Fn::Equals": [
        {
          "Ref": "UseExistingQueue"
        },
        true
      ]
    },
    "TopicCreationEnabled": {
      "Fn::Equals": [
        {
          "Ref": "CreateSNSTopic"
        },
        true
      ]
    }
  },
  "Parameters": {
    "CreateSNSTopic": {
      "AllowedValues": [
        true,
        false
      ],
      "Default": true,
      "Type": "String"
    },
    "SQSArn": {
      "Default": "my-sqs-arn",
      "Type": "String"
    },
    "UseExistingQueue": {
      "AllowedValues": [
        true,
        false
      ],
      "Default": true,
      "Type": "String"
    }
  },
  "Resources": {
    "DestinationLambda": {
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event) => {\n  const response = {\n    statusCode: 200,\n    body: JSON.stringify('Hello from Lambda!'),\n  };\n  return response;\n};\n"
        },
        "Handler": "index.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "DestinationLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "DestinationLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws-cn:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyTestFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context, callback) {\n    var event_received_at = new Date().toISOString();\n    console.log('Event received at: ' + event_received_at);\n    console.log('Received event:', JSON.stringify(event, null, 2));\n\n    if (event.Success) {\n        console.log(\"Success\");\n        context.callbackWaitsForEmptyEventLoop = false;\n        callback(null);\n    } else {\n        console.log(\"Failure\");\n        context.callbackWaitsForEmptyEventLoop = false;\n        callback(new Error(\"Failure from event, Success = false, I am failing!\"), 'Destination Function Error Thrown');\n    }\n};      \n"
        },
        "Handler": "index.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "MyTestFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyTestFunction2": {
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context, callback) {\n    var event_received_at = new Date().toISOString();\n    console.log('Event received at: ' + event_received_at);\n    console.log('Received event:', JSON.stringify(event, null, 2));\n\n    if (event.Success) {\n        console.log(\"Success\");\n        context.callbackWaitsForEmptyEventLoop = false;\n        callback(null);\n    } else {\n        console.log(\"Failure\");\n        context.callbackWaitsForEmptyEventLoop = false;\n        callback(new Error(\"Failure from event, Success = false, I am failing!\"), 'Destination Function Error Thrown');\n    }\n};      \n"
        },
        "Handler": "index.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "MyTestFunction2Role",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyTestFunction2EventInvokeConfig": {
      "Properties": {
        "DestinationConfig": {
          "OnFailure": {
            "Destination": "event-bus-arn"
          },
          "OnSuccess": {
            "Destination": {
              "Fn::GetAtt": [
                "DestinationLambda",
                "Arn"
              ]
            }
          }
        },
        "FunctionName": {
          "Ref": "MyTestFunction2"
        },
        "MaximumEventAgeInSeconds": 70,
        "MaximumRetryAttempts": 1,
        "Qualifier": "$LATEST"
      },
      "Type": "AWS::Lambda::EventInvokeConfig"
    },
    "MyTestFunction2Role": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws-cn:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::GetAtt": [
                      "DestinationLambda",
                      "Arn"
                    ]
                  }
                }
              ]
            },
            "PolicyName": "MyTestFunction2EventInvokeConfigOnSuccessLambdaPolicy"
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "events:PutEvents",
                  "Effect": "Allow",
                  "Resource": "event-bus-arn"
                }
              ]
            },
            "PolicyName": "MyTestFunction2EventInvokeConfigOnFailureEventBridgePolicy"
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyTestFunctionEventInvokeConfig": {
      "Properties": {
        "DestinationConfig": {
          "OnFailure": {
            "Destination": {
              "Fn::If": [
                "TopicCreationEnabled",
                {
                  "Ref": "MyTestFunctionEventInvokeConfigOnFailureTopic"
                },
                "SOME-SNS-ARN"
              ]
            }
          },
          "OnSuccess": {
            "Destination": {
              "Fn::If": [
                "NOTQueueCreationDisabled2da03e5b6f",
                {
                  "Fn::GetAtt": [
                    "MyTestFunctionEventInvokeConfigOnSuccessQueue",
                    "Arn"
                  ]
                },
                "my-sqs-arn"
              ]
            }
          }
        },
        "FunctionName": {
          "Ref": "MyTestFunction"
        },
        "MaximumEventAgeInSeconds": 70,
        "MaximumRetryAttempts": 1,
        "Qualifier": "$LATEST"
      },
      "Type": "AWS::Lambda::EventInvokeConfig"
    },
    "MyTestFunctionEventInvokeConfigOnFailureTopic": {
      "Condition": "TopicCreationEnabled",
      "Properties": {},
      "Type": "AWS::SNS::Topic"
    },
    "MyTestFunctionEventInvokeConfigOnSuccessQueue": {
      "Condition": "NOTQueueCreationDisabled2da03e5b6f",
      "Properties": {},
      "Type": "AWS::SQS::Queue"
    },
    "MyTestFunctionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws-cn:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "sqs:SendMessage",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::If": [
                      "NOTQueueCreationDisabled2da03e5b6f",
                      {
                        "Fn::GetAtt": [
                          "MyTestFunctionEventInvokeConfigOnSuccessQueue",
                          "Arn"
                        ]
                      },
                      "my-sqs-arn"
                    ]
                  }
                }
              ]
            },
            "PolicyName": "MyTestFunctionEventInvokeConfigOnSuccessSQSPolicy"
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "sns:publish",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::If": [
                      "TopicCreationEnabled",
                      {
                        "Ref": "MyTestFunctionEventInvokeConfigOnFailureTopic"
                      },
                      "SOME-SNS-ARN"
                    ]
                  }
                }
              ]
            },
            "PolicyName": "MyTestFunctionEventInvokeConfigOnFailureSNSPolicy"
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "SNSSubscription": {
      "Condition": "TopicCreationEnabled",
      "Properties": {
        "Endpoint": "example@example.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "MyTestFunctionEventInvokeConfigOnFailureTopic"
        }
      },
      "Type": "AWS::SNS::Subscription"
    }
  }
}
