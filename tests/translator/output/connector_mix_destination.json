{
  "Metadata": {
    "SamTransformTest": true
  },
  "Resources": {
    "EventRule": {
      "Properties": {
        "Description": {
          "Fn::Sub": "EventRule-${AWS::StackName}"
        },
        "EventPattern": {
          "source": [
            {
              "Fn::Sub": "${AWS::StackName}-test-event"
            }
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "Function",
                "Arn"
              ]
            },
            "Id": "Target"
          },
          {
            "Arn": {
              "Fn::GetAtt": [
                "VerificationQueue",
                "Arn"
              ]
            },
            "Id": "Target2"
          }
        ]
      },
      "Type": "AWS::Events::Rule"
    },
    "Function": {
      "Properties": {
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk');\n\nexports.handler = async (event) => {\n  const sqs = new AWS.SQS();\n  await sqs.sendMessage({\n    QueueUrl: process.env.QUEUE_URL,\n    MessageBody: \"test\"\n  }).promise();\n};\n"
        },
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "VerificationQueue"
            }
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "FunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs14.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "FunctionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "sqs:SendMessage*"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${queueName}",
                      {
                        "queueName": {
                          "Fn::GetAtt": [
                            "VerificationQueue",
                            "QueueName"
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "FunctionRolePolicy0"
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyConnectorQueuePolicyDestination1": {
      "Metadata": {
        "aws:sam:connectors": {
          "MyConnector": {
            "Destination": {
              "Type": "AWS::SQS::Queue"
            },
            "Source": {
              "Type": "AWS::Events::Rule"
            }
          }
        }
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:SendMessage",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "EventRule",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Resource": {
                "Fn::GetAtt": [
                  "VerificationQueue",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Queues": [
          {
            "Ref": "VerificationQueue"
          }
        ]
      },
      "Type": "AWS::SQS::QueuePolicy"
    },
    "MyConnectorWriteLambdaPermissionDestination0": {
      "Metadata": {
        "aws:sam:connectors": {
          "MyConnector": {
            "Destination": {
              "Type": "AWS::Serverless::Function"
            },
            "Source": {
              "Type": "AWS::Events::Rule"
            }
          }
        }
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventRule",
            "Arn"
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "TriggerFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk');\n\nexports.handler = async (event) => {\n  const eb = new AWS.EventBridge();\n  const response = await eb.putEvents({\n    Entries: [{\n      Source: process.env.EVENT_SOURCE,\n      Detail: \"{}\",\n      DetailType: \"Test\",\n    }]\n  }).promise();\n\n  const sqs = new AWS.SQS();\n  const data = await sqs.getQueueAttributes({\n    QueueUrl: process.env.QUEUE_URL,\n    AttributeNames: ['ApproximateNumberOfMessages']\n  }).promise();\n\n  if (data.Attributes.ApproximateNumberOfMessages < 2) {\n    throw 'Not enough messages in the queue!';\n  }\n};\n"
        },
        "Environment": {
          "Variables": {
            "EVENT_SOURCE": {
              "Fn::Sub": "${AWS::StackName}-test-event"
            },
            "QUEUE_URL": {
              "Ref": "VerificationQueue"
            }
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "TriggerFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs14.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ],
        "Timeout": 10
      },
      "Type": "AWS::Lambda::Function"
    },
    "TriggerFunctionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "events:PutEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/${eventBusName}",
                      {
                        "eventBusName": "default"
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "TriggerFunctionRolePolicy0"
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "sqs:ChangeMessageVisibility",
                    "sqs:ChangeMessageVisibilityBatch",
                    "sqs:DeleteMessage",
                    "sqs:DeleteMessageBatch",
                    "sqs:GetQueueAttributes",
                    "sqs:ReceiveMessage"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${queueName}",
                      {
                        "queueName": {
                          "Fn::GetAtt": [
                            "VerificationQueue",
                            "QueueName"
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "TriggerFunctionRolePolicy1"
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "VerificationQueue": {
      "Type": "AWS::SQS::Queue"
    }
  }
}
