{
  "Parameters": {
    "MyStageName": {
      "Default": "beta", 
      "Type": "String"
    }
  }, 
  "Resources": {
    "MyAwesomeFunctionAliasLive": {
      "Type": "AWS::Lambda::Alias", 
      "Properties": {
        "FunctionVersion": {
          "Fn::GetAtt": [
            "MyAwesomeFunctionVersion640128d35d", 
            "Version"
          ]
        }, 
        "FunctionName": {
          "Ref": "MyAwesomeFunction"
        }, 
        "Name": "Live"
      }
    }, 
    "MyAwesomeFunctionNotificationTopicPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "sns.amazonaws.com", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "SourceArn": {
          "Ref": "Notifications"
        }
      }
    }, 
    "ServerlessRestApiProdStage": {
      "Type": "AWS::ApiGateway::Stage", 
      "Properties": {
        "DeploymentId": {
          "Ref": "ServerlessRestApiDeployment79e6116109"
        }, 
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        }, 
        "StageName": "Prod"
      }
    }, 
    "GetHtmlApiDeploymentf117c932f7": {
      "Type": "AWS::ApiGateway::Deployment", 
      "Properties": {
        "RestApiId": {
          "Ref": "GetHtmlApi"
        }, 
        "Description": "RestApi deployment id: f117c932f75cfa87d23dfed64e9430d0081ef289", 
        "StageName": "Stage"
      }
    }, 
    "MyAwesomeFunctionCWEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "events.amazonaws.com", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "SourceArn": {
          "Fn::GetAtt": [
            "MyAwesomeFunctionCWEvent", 
            "Arn"
          ]
        }
      }
    },
    "MyAwesomeFunctionEBRulePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "MyAwesomeFunctionEBRule",
            "Arn"
          ]
        }
      }
    },
    "MyAwesomeFunctionDDBStream": {
      "Type": "AWS::Lambda::EventSourceMapping", 
      "Properties": {
        "BatchSize": 200, 
        "EventSourceArn": "arn:aws:dynamodb:us-west-2:012345678901:table/TestTable/stream/2015-05-11T21:21:33.291", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "StartingPosition": "LATEST"
      }
    },
    "MyAwesomeFunctionIoTRule": {
      "Type": "AWS::IoT::TopicRule", 
      "Properties": {
        "TopicRulePayload": {
          "AwsIotSqlVersion": "beta", 
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Ref": "MyAwesomeFunctionAliasLive"
                }
              }
            }
          ], 
          "RuleDisabled": false, 
          "Sql": "SELECT * FROM 'topic/test'"
        }
      }
    }, 
    "MyAwesomeFunctionKinesisStream": {
      "Type": "AWS::Lambda::EventSourceMapping", 
      "Properties": {
        "BatchSize": 100, 
        "EventSourceArn": "arn:aws:kinesis:us-west-2:012345678901:stream/my-stream", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "StartingPosition": "TRIM_HORIZON"
      }
    }, 
    "MyAwesomeFunctionImplicitApiPermissionProd": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/add", 
            {
              "__Stage__": "*",
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              }
            }
          ]
        }
      }
    }, 
    "MyAwesomeFunctionIoTRulePermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "SourceAccount": {
          "Fn::Sub": "${AWS::AccountId}"
        }, 
        "Principal": "iot.amazonaws.com", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/${RuleName}", 
            {
              "RuleName": {
                "Ref": "MyAwesomeFunctionIoTRule"
              }
            }
          ]
        }
      }
    }, 
    "MyAwesomeFunctionNotificationTopic": {
      "Type": "AWS::SNS::Subscription", 
      "Properties": {
        "Endpoint": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "Protocol": "lambda", 
        "TopicArn": {
          "Ref": "Notifications"
        }
      }
    }, 
    "MyAwesomeFunctionS3TriggerPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }, 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "Principal": "s3.amazonaws.com"
      }
    }, 
    "GetHtmlApi": {
      "Type": "AWS::ApiGateway::RestApi", 
      "Properties": {
        "BodyS3Location": {
          "Bucket": "sam-demo-bucket", 
          "Key": "webpage_swagger.json"
        }, 
        "Name": "MyGetApi"
      }
    },
    "ServerlessRestApiDeployment79e6116109": {
      "Type": "AWS::ApiGateway::Deployment", 
      "Properties": {
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        }, 
        "Description": "RestApi deployment id: 79e6116109d76ade47a8c413291db052ed065647", 
        "StageName": "Stage"
      }
    }, 
    "MyAwesomeFunctionCWLogPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "logs.amazonaws.com", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${__LogGroupName__}:*", 
            {
              "__LogGroupName__": "MyLogGroup"
            }
          ]
        }
      }
    }, 
    "MyAwesomeFunctionEBSchedule": {
      "Type": "AWS::Events::Rule", 
      "Properties": {
        "ScheduleExpression": "rate(1 minute)", 
        "Targets": [
          {
            "Id": "MyAwesomeFunctionEBScheduleLambdaTarget",
            "Arn": {
              "Ref": "MyAwesomeFunctionAliasLive"
            }
          }
        ]
      }
    }, 
    "MyAwesomeFunctionCWLog": {
      "Type": "AWS::Logs::SubscriptionFilter", 
      "Properties": {
        "DestinationArn": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "FilterPattern": "My pattern", 
        "LogGroupName": "MyLogGroup"
      }, 
      "DependsOn": [
        "MyAwesomeFunctionCWLogPermission"
      ]
    }, 
    "MyAwesomeFunctionRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole", 
          "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole", 
          "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole"
        ],
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    }, 
    "MyAwesomeFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Handler": "hello.handler", 
        "Code": {
          "S3Bucket": "sam-demo-bucket", 
          "S3Key": "hello.zip"
        }, 
        "Role": {
          "Fn::GetAtt": [
            "MyAwesomeFunctionRole", 
            "Arn"
          ]
        }, 
        "Runtime": "python2.7", 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }
    }, 
    "MyAwesomeFunctionCWEvent": {
      "Type": "AWS::Events::Rule", 
      "Properties": {
        "EventPattern": {
          "detail": {
            "state": [
              "terminated"
            ]
          }
        }, 
        "Targets": [
          {
            "Id": "MyAwesomeFunctionCWEventLambdaTarget", 
            "Arn": {
              "Ref": "MyAwesomeFunctionAliasLive"
            }
          }
        ]
      }
    },
    "MyAwesomeFunctionEBRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "detail": {
            "state": [
              "launched"
            ]
          }
        },
        "Targets": [
          {
            "Id": "MyAwesomeFunctionEBRuleLambdaTarget",
            "Arn": {
              "Ref": "MyAwesomeFunctionAliasLive"
            }
          }
        ]
      }
    },
    "MyAwesomeFunctionVersion640128d35d": {
      "DeletionPolicy": "Retain", 
      "UpdateReplacePolicy": "Delete",
      "Type": "AWS::Lambda::Version", 
      "Properties": {
        "FunctionName": {
          "Ref": "MyAwesomeFunction"
        }
      }
    }, 
    "ServerlessRestApi": {
      "Type": "AWS::ApiGateway::RestApi", 
      "Properties": {
        "Body": {
          "info": {
            "version": "1.0", 
            "title": {
              "Ref": "AWS::StackName"
            }
          }, 
          "paths": {
            "/add": {
              "post": {
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST", 
                  "type": "aws_proxy", 
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyAwesomeFunctionAliasLive}/invocations"
                  }
                }, 
                "responses": {}
              }
            }
          }, 
          "swagger": "2.0"
        }
      }
    }, 
    "Notifications": {
      "Type": "AWS::SNS::Topic"
    }, 
    "MyAwesomeFunctionEBSchedulePermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "events.amazonaws.com", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "SourceArn": {
          "Fn::GetAtt": [
            "MyAwesomeFunctionEBSchedule",
            "Arn"
          ]
        }
      }
    }, 
    "Images": {
      "Type": "AWS::S3::Bucket", 
      "Properties": {
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Function": {
                "Ref": "MyAwesomeFunctionAliasLive"
              }, 
              "Event": "s3:ObjectCreated:*"
            }
          ]
        }
      }, 
      "DependsOn": [
        "MyAwesomeFunctionS3TriggerPermission"
      ]
    }, 
    "GetHtmlApiStage": {
      "Type": "AWS::ApiGateway::Stage", 
      "Properties": {
        "DeploymentId": {
          "Ref": "GetHtmlApiDeploymentf117c932f7"
        }, 
        "RestApiId": {
          "Ref": "GetHtmlApi"
        }, 
        "Variables": {
          "LambdaFunction": {
            "Ref": "MyAwesomeFunction"
          }
        }, 
        "StageName": {
          "Ref": "MyStageName"
        }
      }
    }, 
    "MyAwesomeFunctionExplicitApiPermissionStage": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "MyAwesomeFunctionAliasLive"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/", 
            {
              "__Stage__": "*",
              "__ApiId__": {
                "Ref": "GetHtmlApi"
              }
            }
          ]
        }
      }
    }
  }
}
