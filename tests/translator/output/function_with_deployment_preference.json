{
  "Conditions": {
    "AliasProvisionedConcurrencyEnabled": {
      "Fn::Equals": [
        {
          "Ref": "EnableAliasProvisionedConcurrency"
        }, 
        true
      ]
    }
  }, 
  "Parameters": {
    "EnableAliasProvisionedConcurrency": {
      "Default": true, 
      "Type": "String", 
      "AllowedValues": [
        true, 
        false
      ]
    }, 
    "FnName": {
      "Type": "String"
    }, 
    "ProvisionedConcurrency": {
      "Default": 10, 
      "Type": "String"
    }
  }, 
  "Resources": {
    "MinimalFunctionDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup", 
      "Properties": {
        "ApplicationName": {
          "Ref": "ServerlessDeploymentApplication"
        }, 
        "AutoRollbackConfiguration": {
          "Enabled": true, 
          "Events": [
            "DEPLOYMENT_FAILURE", 
            "DEPLOYMENT_STOP_ON_ALARM", 
            "DEPLOYMENT_STOP_ON_REQUEST"
          ]
        }, 
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole", 
            "Arn"
          ]
        }, 
        "DeploymentConfigName": {
          "Fn::Sub": [
            "CodeDeployDefault.Lambda${ConfigName}", 
            {
              "ConfigName": "Linear10PercentEvery3Minutes"
            }
          ]
        }, 
        "DeploymentStyle": {
          "DeploymentType": "BLUE_GREEN", 
          "DeploymentOption": "WITH_TRAFFIC_CONTROL"
        }
      }
    }, 
    "MinimalFunctionRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    }, 
    "MinimalFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Handler": "hello.handler", 
        "Code": {
          "S3Bucket": "sam-demo-bucket", 
          "S3Key": "hello.zip"
        }, 
        "Role": {
          "Fn::GetAtt": [
            "MinimalFunctionRole", 
            "Arn"
          ]
        }, 
        "Runtime": "python2.7", 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }
    }, 
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"
        ], 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    }, 
    "ServerlessDeploymentApplication": {
      "Type": "AWS::CodeDeploy::Application", 
      "Properties": {
        "ComputePlatform": "Lambda"
      }
    }, 
    "MinimalFunctionVersion640128d35d": {
      "DeletionPolicy": "Retain", 
      "Type": "AWS::Lambda::Version", 
      "Properties": {
        "FunctionName": {
          "Ref": "MinimalFunction"
        }
      }
    }, 
    "MinimalFunctionAliaslive": {
      "Type": "AWS::Lambda::Alias", 
      "UpdatePolicy": {
        "CodeDeployLambdaAliasUpdate": {
          "ApplicationName": {
            "Ref": "ServerlessDeploymentApplication"
          }, 
          "DeploymentGroupName": {
            "Ref": "MinimalFunctionDeploymentGroup"
          }
        }
      }, 
      "Properties": {
        "Name": "live", 
        "FunctionVersion": {
          "Fn::GetAtt": [
            "MinimalFunctionVersion640128d35d", 
            "Version"
          ]
        }, 
        "ProvisionedConcurrencyConfig": {
          "ProvisionedConcurrentExecutions": {
            "Fn::If": [
              "AliasProvisionedConcurrencyEnabled", 
              {
                "Ref": "ProvisionedConcurrency"
              }, 
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        }, 
        "FunctionName": {
          "Ref": "MinimalFunction"
        }
      }
    }
  }
}