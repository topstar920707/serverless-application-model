{
  "Conditions": {
    "FunctionCondition": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "FunctionCondition2": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "FunctionCondition3": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "FunctionCondition4": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "FunctionCondition5": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "FunctionCondition6": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "ServerlessRestApiCondition": {
      "Fn::Or": [
        {
          "Condition": "FunctionCondition"
        },
        {
          "Condition": "FunctionCondition2"
        },
        {
          "Condition": "FunctionCondition3"
        },
        {
          "Condition": "FunctionCondition4"
        },
        {
          "Condition": "FunctionCondition5"
        },
        {
          "Condition": "FunctionCondition6"
        }
      ]
    },
    "ServerlessRestApiSLASHusersPathCondition": {
      "Fn::Or": [
        {
          "Condition": "FunctionCondition2"
        },
        {
          "Condition": "FunctionCondition3"
        },
        {
          "Condition": "FunctionCondition4"
        },
        {
          "Condition": "FunctionCondition5"
        },
        {
          "Condition": "FunctionCondition6"
        }
      ]
    }
  },
  "Resources": {
    "MyFunction": {
      "Condition": "FunctionCondition",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "thumbnails.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyFunction2": {
      "Condition": "FunctionCondition2",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "thumbnails.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunction2Role",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyFunction2Role": {
      "Condition": "FunctionCondition2",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyFunction2WithCognitoMultipleUserPoolsAuthorizerPermissionProd": {
      "Condition": "FunctionCondition2",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction2"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/users",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunction3": {
      "Condition": "FunctionCondition3",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "thumbnails.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunction3Role",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyFunction3Role": {
      "Condition": "FunctionCondition3",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyFunction3WithLambdaTokenAuthorizerPermissionProd": {
      "Condition": "FunctionCondition3",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction3"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/users",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunction4": {
      "Condition": "FunctionCondition4",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "thumbnails.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunction4Role",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyFunction4Role": {
      "Condition": "FunctionCondition4",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyFunction4WithLambdaTokenAuthorizerPermissionProd": {
      "Condition": "FunctionCondition4",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction4"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PATCH/users",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunction5": {
      "Condition": "FunctionCondition5",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "thumbnails.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunction5Role",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyFunction5Role": {
      "Condition": "FunctionCondition5",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyFunction5WithLambdaRequestAuthorizerPermissionProd": {
      "Condition": "FunctionCondition5",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction5"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/users",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunction6": {
      "Condition": "FunctionCondition6",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "thumbnails.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunction6Role",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyFunction6Role": {
      "Condition": "FunctionCondition6",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyFunction6WithDefaultAuthorizerPermissionProd": {
      "Condition": "FunctionCondition6",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction6"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PUT/users",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunctionRole": {
      "Condition": "FunctionCondition",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyFunctionWithNoAuthorizerPermissionProd": {
      "Condition": "FunctionCondition",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ServerlessRestApi": {
      "Condition": "ServerlessRestApiCondition",
      "Properties": {
        "Body": {
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            },
            "version": "1.0"
          },
          "paths": {
            "/": {
              "Fn::If": [
                "FunctionCondition",
                {
                  "get": {
                    "Fn::If": [
                      "FunctionCondition",
                      {
                        "responses": {},
                        "security": [
                          {
                            "NONE": []
                          }
                        ],
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "FunctionCondition",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "/users": {
              "Fn::If": [
                "ServerlessRestApiSLASHusersPathCondition",
                {
                  "delete": {
                    "Fn::If": [
                      "FunctionCondition5",
                      {
                        "responses": {},
                        "security": [
                          {
                            "MyLambdaRequestAuth": []
                          }
                        ],
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "FunctionCondition5",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction5.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "get": {
                    "Fn::If": [
                      "FunctionCondition3",
                      {
                        "responses": {},
                        "security": [
                          {
                            "MyLambdaTokenAuth": []
                          }
                        ],
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "FunctionCondition3",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction3.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "patch": {
                    "Fn::If": [
                      "FunctionCondition4",
                      {
                        "responses": {},
                        "security": [
                          {
                            "MyLambdaTokenAuthNoneFunctionInvokeRole": []
                          }
                        ],
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "FunctionCondition4",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction4.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "post": {
                    "Fn::If": [
                      "FunctionCondition2",
                      {
                        "responses": {},
                        "security": [
                          {
                            "MyCognitoAuthMultipleUserPools": []
                          }
                        ],
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "FunctionCondition2",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction2.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "put": {
                    "Fn::If": [
                      "FunctionCondition6",
                      {
                        "responses": {},
                        "security": [
                          {
                            "api_key": []
                          },
                          {
                            "MyCognitoAuth": []
                          }
                        ],
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "FunctionCondition6",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction6.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "securityDefinitions": {
            "MyCognitoAuth": {
              "in": "header",
              "name": "MyAuthorizationHeader",
              "type": "apiKey",
              "x-amazon-apigateway-authorizer": {
                "identityValidationExpression": "myauthvalidationexpression",
                "providerARNs": [
                  "arn:aws:1"
                ],
                "type": "cognito_user_pools"
              },
              "x-amazon-apigateway-authtype": "cognito_user_pools"
            },
            "MyCognitoAuthMultipleUserPools": {
              "in": "header",
              "name": "MyAuthorizationHeader2",
              "type": "apiKey",
              "x-amazon-apigateway-authorizer": {
                "identityValidationExpression": "myauthvalidationexpression2",
                "providerARNs": [
                  "arn:aws:2",
                  "arn:aws:3"
                ],
                "type": "cognito_user_pools"
              },
              "x-amazon-apigateway-authtype": "cognito_user_pools"
            },
            "MyLambdaRequestAuth": {
              "in": "header",
              "name": "Unused",
              "type": "apiKey",
              "x-amazon-apigateway-authorizer": {
                "authorizerCredentials": "arn:aws:iam::123456789012:role/S3Access",
                "authorizerResultTtlInSeconds": 0,
                "authorizerUri": {
                  "Fn::Sub": [
                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${__FunctionArn__}/invocations",
                    {
                      "__FunctionArn__": "arn:aws"
                    }
                  ]
                },
                "identitySource": "method.request.header.Authorization1, method.request.querystring.Authorization2, stageVariables.Authorization3, context.Authorization4",
                "type": "request"
              },
              "x-amazon-apigateway-authtype": "custom"
            },
            "MyLambdaTokenAuth": {
              "in": "header",
              "name": "MyCustomAuthHeader",
              "type": "apiKey",
              "x-amazon-apigateway-authorizer": {
                "authorizerCredentials": "arn:aws:iam::123456789012:role/S3Access",
                "authorizerResultTtlInSeconds": 20,
                "authorizerUri": {
                  "Fn::Sub": [
                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${__FunctionArn__}/invocations",
                    {
                      "__FunctionArn__": "arn:aws"
                    }
                  ]
                },
                "identityValidationExpression": "mycustomauthexpression",
                "type": "token"
              },
              "x-amazon-apigateway-authtype": "custom"
            },
            "MyLambdaTokenAuthNoneFunctionInvokeRole": {
              "in": "header",
              "name": "Authorization",
              "type": "apiKey",
              "x-amazon-apigateway-authorizer": {
                "authorizerResultTtlInSeconds": 0,
                "authorizerUri": {
                  "Fn::Sub": [
                    "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${__FunctionArn__}/invocations",
                    {
                      "__FunctionArn__": "arn:aws"
                    }
                  ]
                },
                "type": "token"
              },
              "x-amazon-apigateway-authtype": "custom"
            },
            "api_key": {
              "in": "header",
              "name": "x-api-key",
              "type": "apiKey"
            }
          },
          "swagger": "2.0"
        }
      },
      "Type": "AWS::ApiGateway::RestApi"
    },
    "ServerlessRestApiDeploymentcbc79073ff": {
      "Condition": "ServerlessRestApiCondition",
      "Properties": {
        "Description": "RestApi deployment id: cbc79073ff900d53c3f67ea223640210914a672c",
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "StageName": "Stage"
      },
      "Type": "AWS::ApiGateway::Deployment"
    },
    "ServerlessRestApiMyLambdaRequestAuthAuthorizerPermission": {
      "Condition": "ServerlessRestApiCondition",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": "arn:aws",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/authorizers/*",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ServerlessRestApiMyLambdaTokenAuthAuthorizerPermission": {
      "Condition": "ServerlessRestApiCondition",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": "arn:aws",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/authorizers/*",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ServerlessRestApiMyLambdaTokenAuthNoneFunctionInvokeRoleAuthorizerPermission": {
      "Condition": "ServerlessRestApiCondition",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": "arn:aws",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/authorizers/*",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ServerlessRestApiProdStage": {
      "Condition": "ServerlessRestApiCondition",
      "Properties": {
        "DeploymentId": {
          "Ref": "ServerlessRestApiDeploymentcbc79073ff"
        },
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "StageName": "Prod"
      },
      "Type": "AWS::ApiGateway::Stage"
    }
  }
}
