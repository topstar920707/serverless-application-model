{
  "AWSTemplateFormatVersion": "2010-09-09", 
  "Conditions": {
    "Cond5": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "Cond4": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "Cond7": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "Cond6": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "Cond1": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "Cond3": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "Cond2": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "ServerlessHttpApiCondition": {
      "Fn::Or": [
        {
          "Condition": "MyCondition"
        }, 
        {
          "Condition": "ServerlessHttpApiCondition1"
        }
      ]
    }, 
    "Cond9": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "Cond8": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "Cond": {
      "Fn::Equals": [
        true, 
        false
      ]
    }, 
    "ServerlessHttpApiCondition1": {
      "Fn::Or": [
        {
          "Condition": "Cond"
        }, 
        {
          "Condition": "Cond1"
        }, 
        {
          "Condition": "Cond2"
        }, 
        {
          "Condition": "Cond3"
        }, 
        {
          "Condition": "Cond4"
        }, 
        {
          "Condition": "Cond5"
        }, 
        {
          "Condition": "Cond6"
        }, 
        {
          "Condition": "Cond7"
        }, 
        {
          "Condition": "Cond8"
        }, 
        {
          "Condition": "Cond9"
        }
      ]
    }, 
    "MyCondition": {
      "Fn::Equals": [
        true, 
        false
      ]
    }
  }, 
  "Description": "A template to test for implicit HttpApi condition handling.", 
  "Resources": {
    "helloworld9HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld9"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub9", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond9"
    }, 
    "helloworld9Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond9"
    }, 
    "helloworld2HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld2"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub2", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond2"
    }, 
    "ServerlessHttpApi": {
      "Type": "AWS::ApiGatewayV2::Api", 
      "Properties": {
        "Body": {
          "info": {
            "version": "1.0", 
            "title": {
              "Ref": "AWS::StackName"
            }
          }, 
          "paths": {
            "/hello/again": {
              "Fn::If": [
                "Cond", 
                {
                  "get": {
                    "Fn::If": [
                      "Cond", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld1099.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub": {
              "Fn::If": [
                "MyCondition", 
                {
                  "get": {
                    "Fn::If": [
                      "MyCondition", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "MyCondition", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${hello.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub8": {
              "Fn::If": [
                "Cond8", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond8", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond8", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld8.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub9": {
              "Fn::If": [
                "Cond9", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond9", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond9", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld9.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "$default": {
              "Fn::If": [
                "Cond", 
                {
                  "x-amazon-apigateway-any-method": {
                    "Fn::If": [
                      "Cond", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld1099.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "isDefaultRoute": true, 
                        "security": [
                          {
                            "oauth2": [
                              "scope4"
                            ]
                          }
                        ], 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub1": {
              "Fn::If": [
                "Cond1", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond1", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond1", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld1.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub2": {
              "Fn::If": [
                "Cond2", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond2", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond2", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld2.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub3": {
              "Fn::If": [
                "Cond3", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond3", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond3", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld3.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub4": {
              "Fn::If": [
                "Cond4", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond4", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond4", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld4.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub5": {
              "Fn::If": [
                "Cond5", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond5", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond5", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld5.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub6": {
              "Fn::If": [
                "Cond6", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond6", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond6", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld6.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }, 
            "/sub7": {
              "Fn::If": [
                "Cond7", 
                {
                  "post": {
                    "Fn::If": [
                      "Cond7", 
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST", 
                          "type": "aws_proxy", 
                          "uri": {
                            "Fn::If": [
                              "Cond7", 
                              {
                                "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloworld7.Arn}/invocations"
                              }, 
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }, 
                          "payloadFormatVersion": "1.0"
                        }, 
                        "responses": {}
                      }, 
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }, 
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }, 
          "components": {
            "securitySchemes": {
              "oauth2": {
                "type": "oauth2", 
                "x-amazon-apigateway-authorizer": {
                  "identitySource": "$request.querystring.param", 
                  "type": "jwt", 
                  "jwtConfiguration": {
                    "audience": [
                      "MyApi"
                    ], 
                    "issuer": "https://www.example.com/v1/connect/oidc"
                  }
                }
              }
            }
          }, 
          "openapi": "3.0.1"
        }
      }, 
      "Condition": "ServerlessHttpApiCondition"
    }, 
    "helloworld6HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld6"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub6", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond6"
    }, 
    "helloworld1Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond1"
    }, 
    "helloworld7": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld7Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond7"
    }, 
    "helloworld6": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld6Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond6"
    }, 
    "helloworld5": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld5Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond5"
    }, 
    "helloworld1099Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond"
    }, 
    "helloworld3": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld3Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond3"
    }, 
    "helloworld2": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld2Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond2"
    }, 
    "helloworld1": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld1Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond1"
    }, 
    "helloworld9": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld9Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond9"
    }, 
    "hello": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloRole", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "MyCondition"
    }, 
    "helloRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "MyCondition"
    }, 
    "helloworld7HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld7"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub7", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond7"
    }, 
    "helloHttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "hello"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/sub", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "MyCondition"
    }, 
    "helloworld1HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld1"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub1", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond1"
    }, 
    "helloworld5Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond5"
    }, 
    "helloworld4Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond4"
    }, 
    "helloworld1099HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld1099"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond"
    }, 
    "helloworld5HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld5"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub5", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond5"
    }, 
    "helloworld7Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond7"
    }, 
    "helloworld2Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond2"
    }, 
    "helloworld8Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond8"
    }, 
    "helloworld4": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld4Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond4"
    }, 
    "helloworld1099": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld1099Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond"
    }, 
    "helloworld8HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld8"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub8", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond8"
    }, 
    "ServerlessHttpApiApiGatewayDefaultStage": {
      "Type": "AWS::ApiGatewayV2::Stage", 
      "Properties": {
        "ApiId": {
          "Ref": "ServerlessHttpApi"
        }, 
        "AutoDeploy": true, 
        "StageName": "$default"
      }, 
      "Condition": "ServerlessHttpApiCondition"
    }, 
    "helloworld3Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond3"
    }, 
    "helloworld8": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 128, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "helloworld8Role", 
            "Arn"
          ]
        }, 
        "Timeout": 3, 
        "Runtime": "nodejs12.x"
      }, 
      "Condition": "Cond8"
    }, 
    "helloworld4HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld4"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub4", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond4"
    }, 
    "helloworld6Role": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }, 
      "Condition": "Cond6"
    }, 
    "helloworld3HttpApiEventPermission": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "FunctionName": {
          "Ref": "helloworld3"
        }, 
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/sub3", 
            {
              "__Stage__": "*", 
              "__ApiId__": {
                "Ref": "ServerlessHttpApi"
              }
            }
          ]
        }
      }, 
      "Condition": "Cond3"
    }
  }
}
