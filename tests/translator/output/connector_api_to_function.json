{
  "Resources": {
    "MyApiGateway": {
      "Properties": {
        "Description": "A test API",
        "Name": "MyRestAPI"
      },
      "Type": "AWS::ApiGateway::RestApi"
    },
    "MyApiGatewayRootMethod": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "MOCK"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "MyApiGateway",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "MyApiGateway"
        }
      },
      "Type": "AWS::ApiGateway::Method"
    },
    "MyApiGatewayV2": {
      "Properties": {
        "Name": "MyApi",
        "ProtocolType": "WEBSOCKET"
      },
      "Type": "AWS::ApiGatewayV2::Api"
    },
    "MyConnectorApiV2ToLambdaWriteLambdaPermission": {
      "Metadata": {
        "aws:sam:connectors": {
          "MyConnectorApiV2ToLambda": {
            "Destination": {
              "Type": "AWS::Serverless::Function"
            },
            "Source": {
              "Type": "AWS::ApiGatewayV2::Api"
            }
          }
        }
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "MyServerlessFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${SourceResourceId}/${SourceQualifier}",
            {
              "SourceQualifier": "*",
              "SourceResourceId": {
                "Ref": "MyApiGatewayV2"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyConnectorApigwToLambdaWriteLambdaPermission": {
      "Metadata": {
        "aws:sam:connectors": {
          "MyConnectorApigwToLambda": {
            "Destination": {
              "Type": "AWS::Serverless::Function"
            },
            "Source": {
              "Type": "AWS::ApiGateway::RestApi"
            }
          }
        }
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "MyServerlessFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${SourceResourceId}/${SourceQualifier}",
            {
              "SourceQualifier": "*",
              "SourceResourceId": {
                "Ref": "MyApiGateway"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyConnectorServerlessApiToLambdaWriteLambdaPermission": {
      "Metadata": {
        "aws:sam:connectors": {
          "MyConnectorServerlessApiToLambda": {
            "Destination": {
              "Type": "AWS::Lambda::Function"
            },
            "Source": {
              "Type": "AWS::Serverless::Api"
            }
          }
        }
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "MyFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${SourceResourceId}/${SourceQualifier}",
            {
              "SourceQualifier": "*",
              "SourceResourceId": {
                "Ref": "MyServerlessApi"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyConnectorServerlessHttpApiToLambdaWriteLambdaPermission": {
      "Metadata": {
        "aws:sam:connectors": {
          "MyConnectorServerlessHttpApiToLambda": {
            "Destination": {
              "Type": "AWS::Lambda::Function"
            },
            "Source": {
              "Type": "AWS::Serverless::HttpApi"
            }
          }
        }
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "MyFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${SourceResourceId}/${SourceQualifier}",
            {
              "SourceQualifier": "*",
              "SourceResourceId": {
                "Ref": "MyHttpApi"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk');\nexports.handler = async (event) => {\n  console.log(JSON.stringify(event));\n};\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs14.x"
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyHttpApi": {
      "Properties": {
        "Body": {
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            },
            "version": "1.0"
          },
          "openapi": "3.0.1",
          "paths": {},
          "tags": [
            {
              "name": "httpapi:createdBy",
              "x-amazon-apigateway-tag-value": "SAM"
            }
          ]
        }
      },
      "Type": "AWS::ApiGatewayV2::Api"
    },
    "MyHttpApiProdStage": {
      "Properties": {
        "ApiId": {
          "Ref": "MyHttpApi"
        },
        "AutoDeploy": true,
        "StageName": "Prod",
        "Tags": {
          "httpapi:createdBy": "SAM"
        }
      },
      "Type": "AWS::ApiGatewayV2::Stage"
    },
    "MyRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "MyServerlessApi": {
      "Properties": {
        "Body": {
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            },
            "version": "1.0"
          },
          "paths": {},
          "swagger": "2.0"
        }
      },
      "Type": "AWS::ApiGateway::RestApi"
    },
    "MyServerlessApiDeployment5332c373d4": {
      "Properties": {
        "Description": "RestApi deployment id: 5332c373d45c69e6c0f562b4a419aa8eb311adc7",
        "RestApiId": {
          "Ref": "MyServerlessApi"
        },
        "StageName": "Stage"
      },
      "Type": "AWS::ApiGateway::Deployment"
    },
    "MyServerlessApiProdStage": {
      "Properties": {
        "DeploymentId": {
          "Ref": "MyServerlessApiDeployment5332c373d4"
        },
        "RestApiId": {
          "Ref": "MyServerlessApi"
        },
        "StageName": "Prod"
      },
      "Type": "AWS::ApiGateway::Stage"
    },
    "MyServerlessFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk');\nexports.handler = async (event) => {\n  console.log(JSON.stringify(event));\n};\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyServerlessFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs14.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyServerlessFunctionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    }
  }
}
