Parameters:
  DomainName:
    Type: String
    Default: 'example.com'
  ACMCertificateArn:
    Type: String
    Default: 'cert-arn-in-us-east-1'
Resources:
  MyFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event) => {
          const response = {
            statusCode: 200,
            body: JSON.stringify('Hello from Lambda!'),
          };
          return response;
        };
      Handler: index.handler
      Runtime: nodejs12.x
      Events:
        Fetch:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Method: Post
            Path: /fetch

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      OpenApiVersion: 3.0.1
      StageName: Prod
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref ACMCertificateArn
        EndpointConfiguration: EDGE
        BasePath:
          - /home
        Route53:
         HostedZoneId: ZQ1UAL4EFZVME
         IpV6: true
## ====== Everything below here is optional, leave this out if you want to use the internal Api Gateway distribution =======
         DistributionDomainName: !GetAtt Distribution.DomainName 

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName: !Ref DomainName
          Id: !Ref DomainName
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          AllowedMethods: [ HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH ]
          ForwardedValues:
            QueryString: false
          SmoothStreaming: false
          Compress: true
          TargetOriginId: !Ref DomainName
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref ACMCertificateArn