doctype html
html
  head
    title My Serverless Application
    style.
      body {
        width: 650px;
        margin: auto;
      }
      h1 {
        text-align: center;
      }
      .response > code {
        display: block;
        background-color: #eff0f1;
        color: #393318;
        padding: 5px;
        font-family: Consolas,Menlo,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New,monospace,sans-serif;
        white-space: pre;
        overflow-x: auto;
      }
      form {
        margin-bottom: 1rem;
      }
      .form-group {
        padding-bottom: 1rem;
      }
      label {
        display: block;
      }
  body
    h1 My Serverless Application
    p
      | Public endpoints: GET /, GET /users, GET /users/{userId}
    p
      | Authorized endpoints: POST /users, PUT /users/{userId}, DELETE /users/{userId}
    
    section.form
      h2 Invoke API
      p Experiment with the `users` resource with the form below.
      form
        div.form-group
          label(for='methodField') Method
          select(name='method' id='methodField')
            option(value='GET') GET
            option(value='POST') POST
            option(value='PUT') PUT
            option(value='DELETE') DELETE
        div.form-group
          label(for='idField') user id
          input(type='text' name='id' id='idField')
        div.form-group
          label(for='nameField') name
          input(type='text' name='name' id='nameField')
        input(type='submit')

    section
      h2 Response
      p.request
        span.request__method GET
        span &nbsp;
        spand.request__endpoint /users
      section.response
        code
          
    script.

      const apiId = '#{apiId}'
      const apiUrl = '#{apiUrl}/'
      const cognitoUserPoolClientId = '#{cognitoUserPoolClientId}'
      
      const queryStringParams = new URLSearchParams(window.location.search)
      const cognitoCode = queryStringParams.get('code')
      let cognitoIdentityToken = localStorage.getItem('cognitoIdentityToken')
      
      const form = document.querySelector('form')
      form.addEventListener('submit', onApiInvokeFormSubmit)

      fetch('users')
      .then(setResponseText)
      .catch(setResponseText)

      if (cognitoCode) {
        exchangeCodeForAccessToken()
          .then(response => response.json())
          .then(json => {
            if (json.id_token) {
              cognitoIdentityToken = json.id_token
              localStorage.setItem('cognitoIdentityToken', cognitoIdentityToken)
            }
          })
      }

      function convertJsonToFormUrlEncoded(json) {
        const oAuthTokenBodyArray = Object.entries(json).map(([key, value]) => {
          const encodedKey = encodeURIComponent(key)
          const encodedValue = encodeURIComponent(value)

          return `${encodedKey}=${encodedValue}`
        })

        return oAuthTokenBodyArray.join('&')
      }

      function exchangeCodeForAccessToken() {
        const oauthTokenBodyJson = {
          grant_type: 'authorization_code',
          client_id: cognitoUserPoolClientId,
          code: cognitoCode,
          redirect_uri: apiUrl
        }
        const oauthTokenBody = convertJsonToFormUrlEncoded(oauthTokenBodyJson)
        
        return fetch(`https://${apiId}.auth.us-east-1.amazoncognito.com/oauth2/token`,
        {
          method: 'POST',
          headers: {
            ['Content-Type']: 'application/x-www-form-urlencoded'
          },
          body: oauthTokenBody
        })
      }

      function onApiInvokeFormSubmit (event) {
        event.preventDefault()
        const method = document.getElementById('methodField').value
        const id = document.getElementById('idField').value
        const name = document.getElementById('nameField').value
        const endpoint = id ? 'users/' + id : 'users'
        const body = ['POST', 'PUT'].includes(method) ? JSON.stringify({ name: name }) : undefined
        const headers = {
            'content-type': 'application/json',
            'Authorization': cognitoIdentityToken
          }
        
        document.querySelector('.request__method').innerText = method
        document.querySelector('.request__endpoint').innerText = `/${endpoint}`
        
        return fetch(endpoint, {
          method,
          headers,
          body
        })
        .then(setResponseText)
        .catch(setResponseText)
      }

      function setResponseText(response) {
        const contentType = response.headers.get('content-type')
        if (contentType.includes('application/json')) {
          return response.json().then(json => {
            document.querySelector('code').innerText = JSON.stringify(json, null, 4)
          })
        }

        return response.text().then(text => {
          document.querySelector('code').innerText = text
        })
      }