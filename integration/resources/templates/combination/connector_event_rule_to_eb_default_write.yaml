Resources:
  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      Handler: index.handler
      Timeout: 10  # in case eb has delay
      InlineCode: |
        const AWS = require('aws-sdk');

        exports.handler = async (event) => {
          const eb = new AWS.EventBridge();
          const response = await eb.putEvents({
            Entries: [{
              Source: process.env.EVENT_SOURCE,
              Detail: "{}",
              DetailType: "Test",
              EventBusName: process.env.EVENT_BUS_NAME,
            }]
          }).promise();

          const sqs = new AWS.SQS();
          const data = await sqs.receiveMessage({
            QueueUrl: process.env.QUEUE_URL,
            WaitTimeSeconds: 5,
          }).promise();

          if (data.Messages.length == 0) {
            throw 'No messages in the queue!';
          }
        };
      Environment:
        Variables:
          QUEUE_URL: !Ref VerificationQueue
          EVENT_SOURCE: !Sub '${AWS::StackName}-test-event'
          EVENT_BUS_NAME: !Ref CustomEventBus
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref CustomEventBus
        - SQSPollerPolicy:
            QueueName: !GetAtt VerificationQueue.QueueName

  CustomEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${AWS::StackName}-EventBus"

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'EventRule-${AWS::StackName}'
      EventBusName: !Ref CustomEventBus
      EventPattern:
        source:
          - !Sub '${AWS::StackName}-test-event'
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
          Id: "EBBus"
          RoleArn: !GetAtt EBRole.Arn

  EBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole

  MyConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: EventRule
      Destination:
        Type: AWS::Events::EventBus
        Arn: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Permissions:
        - Write

  VerificationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'EventRule-${AWS::StackName}-verification'
      EventPattern:
        source:
          - !Sub '${AWS::StackName}-test-event'
      Targets:
        - Arn: !GetAtt VerificationQueue.Arn
          Id: "SQSqueue"

  VerificationQueue:
    Type: AWS::SQS::Queue

  ConnectorNotBeingTested:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: VerificationEventRule
      Destination:
        Id: VerificationQueue
      Permissions:
        - Write
